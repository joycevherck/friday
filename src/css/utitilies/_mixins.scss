@mixin respond-to($point, $condition: max-width) {
  // Ensure media query isn't in quotes
  $condition: unquote($condition);
  // Check global breakpoints first
  @if map-has-key($breakpoints, $point) {
    @media ($condition: map-get($breakpoints, $point)) {
      @content;
    }
    // Failing that, check local tweakpoints
  } @else if map-has-key($tweakpoints, $point) {
    @media ($condition: map-get($tweakpoints, $point)) {
      @content;
    }
  } @else {
    @warn "Could not find `#{$point}` in both local ($tweakpoints) and global ($breakpoints) contexts. Media block omitted.";
  }
}

@mixin font-size($size) {
  $font-size-properties: map-get($font-sizes, $size);

  @if $font-size-properties {
    @include font-size(map-get($font-size-properties, font-size));
  } @else {
    font-size: #{$size}px;
    font-size: #{$size / 10}rem;
  }
}

@mixin transparent($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str})\0;
}

@mixin hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 0;
  width: 0;
}

@mixin clearfix() {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

@function brandcolour($name) {
  @return map-get($brandcolours, $name);
}

@mixin column {
  float: left;
  box-sizing: border-box;
  padding-left: $gutter-width / 2;
  padding-right: $gutter-width / 2;

  .layout--gutter-narrow > &,
  .grid--gutter-narrow > & {
    padding-left: $gutter-width-narrow / 2;
    padding-right: $gutter-width-narrow / 2;
  }
}

@mixin column-last {
  float: right;
}

@mixin column-reset-last {
  float: none;
}

@mixin hover-underline-span($icon-name, $icon-color: null) {
  text-decoration: none;

  &:hover {
    span {
      text-decoration: underline;
    }
  }

  &[href^=tel]:hover {
    span {
      text-decoration: none;
    }
  }

  .icon {
    &:after {
      @include icon($icon-name, $icon-color);
    }
  }

  &:focus {
    outline: none;

    span {
      text-decoration: underline;
    }
  }
}

@mixin background-size($type: cover) {
  background-size: $type;

  .lt-ie9 & {
    -ms-behavior: url('/assets/dist/htc/backgroundsize.min.htc');
  }
}

@mixin icon-link($icon: 'circled-chevron-right', $colour: 'green') {
  @include font('black', 'xsmall', $caps: true);
  @include hover-underline-span($icon, $colour);
  display: block;

  span {
    margin-right: 0.8em;
  }

  .icon {
    font-size: 1.2em;
    position: relative;
    top: 0.15em;
  }
}


@mixin appearance($appearance) {
  appearance: $appearance;
  -moz-appearance: $appearance;
  -webkit-appearance: $appearance;
}
